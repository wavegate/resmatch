// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                   @id @default(autoincrement())
  email                       String?               @unique
  password                    String?
  isConfirmed                 Boolean?              @default(false)
  alias                       String                @unique
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  googleId                    String?               @unique
  redditId                    String?               @unique
  discordId                   String?               @unique
  interviewInvites            InterviewInvite[]
  cityUserInputs              CityUserInput[]
  greenCard                   Boolean?
  step2CSPathway              Pathway?
  schoolRanking               SchoolRanking?
  yearOfGraduation            Int?
  monthsOfUSCE                Int?
  ecfmgCertified              Boolean?
  visaRequired                Boolean?
  graduateType                GraduateType          @default(US)
  medicalDegree               MedicalDegree?
  img                         IMGType?
  step1ScorePass              Boolean?
  step1Score                  Int?
  step2Score                  Int?
  step3Score                  Int?
  comlex1ScorePass            Boolean?
  comlex2Score                Int?
  redFlags                    Boolean?
  redFlagsExplanation         String?
  aoa                         Boolean?
  sigmaSigmaPhi               Boolean?
  goldHumanism                Boolean?
  honors                      Int?
  highPass                    Int?
  pass                        Int?
  fail                        Int?
  mstp                        Boolean?
  numPublications             Int?
  numWorkExperiences          Int?
  numVolunteerExperiences     Int?
  classRank                   ClassRanking?
  otherDegrees                String?
  numApplications             Int?
  numInterviews               Int?
  numWithdrawn                Int?
  numRejected                 Int?
  numWaitlisted               Int?
  applicationYear             Int?
  public                      Boolean               @default(true)
  fameShames                  FameShame[]
  comments                    Comment[]
  rankLists                   RankList[]
  PostIVCommunication         PostIVCommunication[]
  ScheduleDetails             ScheduleDetails[]
  InterviewLogistics          InterviewLogistics[]
  SecondLook                  SecondLook[]
  InterviewRejection          InterviewRejection[]
  M4InternImpression          M4InternImpression[]
  Malignant                   Malignant[]
  LOIResponse                 LOIResponse[]
  InterviewImpression         InterviewImpression[]
  Question                    Question[]
  Dropped                     Dropped[]
  FellowshipMatch             FellowshipMatch[]
  Suggestion                  Suggestion[]
  XorY                        XorY[]
  role                        Role?
  redditUsername              String?
  discordUsername             String?
  followedPrograms            Program[]
  upvotedInterviewInvites     InterviewInvite[]     @relation("upvotedInterviewInvites")
  upvotedCityUserInputs       CityUserInput[]       @relation("upvotedCityUserInputs")
  upvotedFameShames           FameShame[]           @relation("upvotedFameShames")
  upvotedComments             Comment[]             @relation("upvotedComments")
  upvotedRankLists            RankList[]            @relation("upvotedRankLists")
  upvotedPostIVCommunications PostIVCommunication[] @relation("upvotedPostIVCommunications")
  upvotedScheduleDetails      ScheduleDetails[]     @relation("upvotedScheduleDetails")
  upvotedInterviewLogistics   InterviewLogistics[]  @relation("upvotedInterviewLogistics")
  upvotedSecondLooks          SecondLook[]          @relation("upvotedSecondLooks")
  upvotedInterviewRejections  InterviewRejection[]  @relation("upvotedInterviewRejections")
  upvotedM4InternImpressions  M4InternImpression[]  @relation("upvotedM4InternImpressions")
  upvotedMalignants           Malignant[]           @relation("upvotedMalignants")
  upvotedLOIResponses         LOIResponse[]         @relation("upvotedLOIResponses")
  upvotedInterviewImpressions InterviewImpression[] @relation("upvotedInterviewImpressions")
  upvotedQuestions            Question[]            @relation("upvotedQuestions")
  upvotedDropped              Dropped[]             @relation("upvotedDropped")
  upvotedFellowshipMatches    FellowshipMatch[]     @relation("upvotedFellowshipMatches")
  upvotedBinAssignments       BinAssignment[]       @relation("upvotedBinAssignments")
  upvotedXorY                 XorY[]                @relation("upvotedXorY")
  notifications               Notification[]
}

enum Role {
  MOD
  ADMIN
  USER
}

model Specialty {
  id            Int       @id @default(autoincrement())
  specialtyCode String    @unique
  name          String
  programs      Program[]
}

model Institution {
  id              Int       @id @default(autoincrement())
  name            String
  institutionCode String    @unique
  programs        Program[]
  cityId          Int?
  city            City?     @relation(fields: [cityId], references: [id])
}

model Program {
  id              Int     @id @default(autoincrement())
  name            String
  institutionId   Int
  specialtyId     Int
  rankListId      Int?
  cityId          Int?
  nrmpProgramCode String  @unique
  acgmeCode       String?

  institution         Institution           @relation(fields: [institutionId], references: [id])
  specialty           Specialty             @relation(fields: [specialtyId], references: [id])
  city                City?                 @relation(fields: [cityId], references: [id])
  matchedInLists      RankList[]            @relation("MatchedProgram")
  interviewInvites    InterviewInvite[]
  image               String?
  fameShames          FameShame[]
  PostIVCommunication PostIVCommunication[]
  ScheduleDetails     ScheduleDetails[]
  InterviewLogistics  InterviewLogistics[]
  SecondLook          SecondLook[]
  InterviewRejection  InterviewRejection[]
  M4InternImpression  M4InternImpression[]
  Malignant           Malignant[]
  LOIResponse         LOIResponse[]
  InterviewImpression InterviewImpression[]
  Question            Question[]
  Dropped             Dropped[]
  FellowshipMatch     FellowshipMatch[]
  asProgramX          XorY[]                @relation("ProgramXRelation")
  asProgramY          XorY[]                @relation("ProgramYRelation")
  RankedProgram       RankedProgram[]
  binAssignments      BinAssignment[]
  followingUsers      User[]
  imageUrl            String?

  @@index(fields: [cityId])
}

model InterviewInvite {
  id                   Int            @id @default(autoincrement())
  graduateType         GraduateType?
  img                  IMGType?
  date                 DateTime
  geographicPreference Boolean?
  signal               Boolean?
  signalTier           SignalTier?
  inState              Boolean?
  medicalDegree        MedicalDegree?
  step1ScorePass       Boolean?
  step1Score           Int?
  step2Score           Int?
  step3Score           Int?
  comlex1ScorePass     Boolean?
  comlex2Score         Int?
  aoa                  Boolean?
  sigmaSigmaPhi        Boolean?
  goldHumanism         Boolean?
  visaRequired         Boolean?
  subI                 Boolean?
  home                 Boolean?
  pstp                 Boolean?
  honors               Int?
  highPass             Int?
  pass                 Int?
  fail                 Int?
  yearOfGraduation     Int?
  greenCard            Boolean?
  connection           String?
  away                 Boolean?
  anonymous            Boolean        @default(false)
  comments             Comment[]
  upvotedUsers         User[]         @relation("upvotedInterviewInvites")

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  programId Int
  program   Program @relation(fields: [programId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum SignalTier {
  GOLD
  SILVER
}

enum GraduateType {
  US
  IMG
}

enum IMGType {
  NONUSIMG
  USIMG
}

enum MedicalDegree {
  MD
  DO
}

enum SchoolRanking {
  TOP20
  TOP50
  MID
  LOW
  UNRANKED
}

enum ClassRanking {
  QUARTILE1 // Top 25%
  QUARTILE2 // Second 25%
  QUARTILE3 // Third 25%
  QUARTILE4 // Bottom 25%
}

enum Pathway {
  PATHWAY1
  PATHWAY2
  PATHWAY3
  PATHWAY4
  PATHWAY5
  PATHWAY6
}

model City {
  id           Int             @id @default(autoincrement())
  name         String
  state        String
  userInputs   CityUserInput[] // Relation field to CityUserInput
  institutions Institution[]
  programs     Program[]

  @@index([state])
  @@index([name, state])
}

model CityUserInput {
  id                   Int       @id @default(autoincrement())
  pros                 String?
  cons                 String?
  publicTransportation String?
  weather              String?
  dating               String?
  lgbtq                String?
  diversity            String?
  safetyCrime          String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               Int
  cityId               Int
  anonymous            Boolean   @default(false)
  comments             Comment[]
  upvotedUsers         User[]    @relation("upvotedCityUserInputs")

  city         City           @relation(fields: [cityId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([cityId])
  @@index([userId])
}

model FameShame {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fame         String?
  shame        String?
  programId    Int
  anonymous    Boolean        @default(false)
  program      Program        @relation(fields: [programId], references: [id])
  comments     Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedFameShames")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

model Comment {
  id                     Int                  @id @default(autoincrement())
  userId                 Int
  content                String
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  RankList               RankList?            @relation(fields: [rankListId], references: [id])
  rankListId             Int?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  PostIVCommunication    PostIVCommunication? @relation(fields: [postIVCommunicationId], references: [id], onDelete: Cascade)
  postIVCommunicationId  Int?
  ScheduleDetails        ScheduleDetails?     @relation(fields: [scheduleDetailsId], references: [id], onDelete: Cascade)
  scheduleDetailsId      Int?
  M4InternImpression     M4InternImpression?  @relation(fields: [m4InternImpressionId], references: [id], onDelete: Cascade)
  m4InternImpressionId   Int?
  Malignant              Malignant?           @relation(fields: [malignantId], references: [id], onDelete: Cascade)
  malignantId            Int?
  LOIResponse            LOIResponse?         @relation(fields: [lOIResponseId], references: [id], onDelete: Cascade)
  lOIResponseId          Int?
  InterviewImpression    InterviewImpression? @relation(fields: [interviewImpressionId], references: [id], onDelete: Cascade)
  interviewImpressionId  Int?
  TierList               TierList?            @relation(fields: [tierListId], references: [id], onDelete: Cascade)
  tierListId             Int?
  parentId               Int?
  topLevelParentId       Int?
  parent                 Comment?             @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies                Comment[]            @relation("CommentReplies")
  main                   Boolean              @default(false)
  pstp                   Boolean              @default(false)
  report                 Boolean              @default(false)
  XorY                   XorY?                @relation(fields: [xorYId], references: [id], onDelete: Cascade)
  xorYId                 Int?
  anonymous              Boolean              @default(false)
  InterviewInvite        InterviewInvite?     @relation(fields: [interviewInviteId], references: [id], onDelete: Cascade)
  interviewInviteId      Int?
  FameShame              FameShame?           @relation(fields: [fameShameId], references: [id], onDelete: Cascade)
  fameShameId            Int?
  InterviewLogistics     InterviewLogistics?  @relation(fields: [interviewLogisticsId], references: [id], onDelete: Cascade)
  interviewLogisticsId   Int?
  SecondLook             SecondLook?          @relation(fields: [secondLookId], references: [id], onDelete: Cascade)
  secondLookId           Int?
  InterviewRejection     InterviewRejection?  @relation(fields: [interviewRejectionId], references: [id], onDelete: Cascade)
  interviewRejectionId   Int?
  Question               Question?            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId             Int?
  Dropped                Dropped?             @relation(fields: [droppedId], references: [id], onDelete: Cascade)
  droppedId              Int?
  FellowshipMatch        FellowshipMatch?     @relation(fields: [fellowshipMatchId], references: [id], onDelete: Cascade)
  fellowshipMatchId      Int?
  CityUserInput          CityUserInput?       @relation(fields: [cityUserInputId], references: [id])
  cityUserInputId        Int?
  upvotedUsers           User[]               @relation("upvotedComments")
  category               CommentCategory?
  // Relation for comments that are being replied to (notifications for original comment)
  notificationsAsComment Notification[]       @relation("CommentBeingRepliedTo")

  // Relation for notifications where this comment is a reply (notifications for replies)
  notificationsAsReplyComment Notification[] @relation("ReplyToComment")

  @@index([parentId])
  @@index([userId])
  @@index(fields: [userId, parentId])
}

enum CommentCategory {
  VENT
  ADVICE
  SERIOUS_QUESTION
  HAPPY
}

model RankList {
  id                         Int            @id @default(autoincrement())
  userId                     Int
  user                       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  graduateType               GraduateType
  medicalDegree              MedicalDegree?
  numberOfProgramsApplied    Int?
  numberOfInvites            Int?
  numberOfInterviewsAttended Int?
  doneWithInterviews         Boolean?
  whyNumberOne               String?
  prioritiesWhenRanking      String?
  hardestPartOfRanking       String?
  comments                   Comment[]
  anonymous                  Boolean        @default(false)

  matchedProgramId Int?
  matchedProgram   Program?        @relation("MatchedProgram", fields: [matchedProgramId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  RankedProgram    RankedProgram[]
  upvotedUsers     User[]          @relation("upvotedRankLists")
  Notification     Notification[]

  @@index(fields: [userId])
}

model RankedProgram {
  id         Int      @id @default(autoincrement())
  rank       Int // This field will store the order of the programs
  rankListId Int
  rankList   RankList @relation(fields: [rankListId], references: [id], onDelete: Cascade)
  programId  Int
  program    Program  @relation(fields: [programId], references: [id])

  @@unique([rankListId, rank])
  @@unique([rankListId, programId])
}

model PostIVCommunication {
  id                    Int                   @id @default(autoincrement())
  userId                Int
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId             Int
  program               Program               @relation(fields: [programId], references: [id])
  communicationReceived String?
  thankYouLetterPolicy  ThankYouLetterPolicy?
  rankImpact            Boolean?
  source                Source?
  comments              Comment[]
  anonymous             Boolean               @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedPostIVCommunications")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum ThankYouLetterPolicy {
  DO_NOT_SEND
  STRONGLY_DISCOURAGED
  DISCOURAGED
  NOT_EXPECTED
  NOT_REQUIRED
  WELCOMED_BUT_NOT_EXPECTED
  WELCOMED
  POSITIVE_RESPONSE
}

enum Source {
  PD
  PC
  SELECTION_COMMITTEE
  RESIDENT
  WEBSITE
  STATEMENT_OF_MATCH_INTEGRITY
  INTERVIEWER
}

model ScheduleDetails {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId Int
  program   Program @relation(fields: [programId], references: [id])

  longOvernightCall    String?
  scheduleContinuity   String?
  locations            String?
  emr                  EMR?
  startDateOrientation String?
  visaInfo             VisaInfo?
  union                Boolean?
  midlevel             String?
  ancillary            String?
  teamRatios           String?
  internCap            String?
  admittingSystem      String?
  icuHours             String?
  nightFloat           String?
  sickCallSystem       String?
  moonlighting         String?
  stayUntilSignout     String?
  didactics            String?
  vacationHolidays     String?
  gym                  String?
  food                 String?
  salary               String?
  comments             Comment[]
  anonymous            Boolean   @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedScheduleDetails")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum EMR {
  EPIC
  CERNER
  MEDITECH
  CPRS
  ALLSCRIPTS
  ORCHID
  SOARIAN
  SUNRISE
  PARAGON
  POWER_CHART
  OMR
  ICENTRA
  CITRIX
  OPTIMUM
  MEDHOST
  EPIC_CPRS
}

enum VisaInfo {
  J1
  H1B
  J1_H1B
  NO_VISAS
  ACCEPTS_VISA
}

model InterviewLogistics {
  id                Int                @id @default(autoincrement())
  userId            Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId         Int
  program           Program            @relation(fields: [programId], references: [id])
  schedulerPlatform SchedulerPlatform?
  ivFormat          String?
  timeSlots         String?
  ivPlatform        IVPlatform?
  dateOfferSent     DateTime?
  slotsLeft         Int?
  openIVDates       DateTime[]
  comments          Comment[]
  anonymous         Boolean            @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedInterviewLogistics")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum SchedulerPlatform {
  THALAMUS
  ERAS
  IV_BROKER
  INTERVIEW_BROKER
  PROGRAM_EMAIL
  ZOOM
  REZRATE
  PROGRAM_WEBSITE
  COORDINATOR
  THIRD_FRIDAY
}

enum IVPlatform {
  ZOOM
  THALAMUS
  WEBEX
  IN_PERSON
  MICROSOFT_TEAMS
  REZRATE
  PANORAMAMD
  GOOGLE_MEET
}

model SecondLook {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId     Int
  program       Program   @relation(fields: [programId], references: [id])
  setting       Setting?
  date          DateTime?
  bearingOnRank String?
  comments      Comment[]
  anonymous     Boolean   @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedSecondLooks")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum Setting {
  IN_PERSON
  VIRTUAL
  BOTH
}

model InterviewRejection {
  id        Int       @id @default(autoincrement())
  programId Int
  program   Program   @relation(fields: [programId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  anonymous Boolean   @default(false)
  comments  Comment[]

  graduateType         GraduateType?
  img                  IMGType?
  geographicPreference Boolean?
  signal               Boolean?
  inState              Boolean?
  medicalDegree        MedicalDegree?
  step1ScorePass       Boolean?
  step1Score           Int?
  step2Score           Int?
  comlex1ScorePass     Boolean?
  comlex2Score         Int?
  visaRequired         Boolean?
  subI                 Boolean?
  home                 Boolean?
  pstp                 Boolean?
  yearOfGraduation     Int?
  greenCard            Boolean?
  away                 Boolean?
  honors               Int?
  highPass             Int?
  pass                 Int?
  fail                 Int?
  reason               String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedInterviewRejections")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

model M4InternImpression {
  id                 Int       @id @default(autoincrement())
  userId             Int
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId          Int
  program            Program   @relation(fields: [programId], references: [id])
  positiveImpression String?
  negativeImpression String?
  comments           Comment[]
  anonymous          Boolean   @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedM4InternImpressions")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

model Malignant {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId   Int
  program     Program       @relation(fields: [programId], references: [id])
  malignant   MalignantEnum
  source      String?
  explanation String?
  comments    Comment[]
  anonymous   Boolean       @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedMalignants")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum MalignantEnum {
  Yes
  No
  Maybe
}

model LOIResponse {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId Int
  program   Program @relation(fields: [programId], references: [id])

  intent                     Boolean?
  sentTo                     LOIResponseRecipient?
  dateSent                   DateTime?
  response                   Boolean?
  responseTone               ResponseTone?
  timeBetweenSentAndResponse String?
  mentionedTopChoice         Boolean?
  comments                   Comment[]
  anonymous                  Boolean               @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedLOIResponses")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum LOIResponseRecipient {
  PROGRAM_EMAIL
  PC
  PD
  PD_PC
  EMAIL_ON_ERAS
  RESIDENCY_EXPLORER_EMAIL
}

enum ResponseTone {
  POSITIVE
  GENERIC
  NEUTRAL
  NEGATIVE
  AUTOMATED
}

model InterviewImpression {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId Int
  program   Program @relation(fields: [programId], references: [id])

  positives                  String?
  negatives                  String?
  howInterviewDayAffectsRank Change?
  gift                       String?
  timeGiftReceived           String?
  comments                   Comment[]
  anonymous                  Boolean   @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedInterviewImpressions")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

enum Change {
  MUCH_LOWER
  LOWER
  SLIGHTLY_LOWER
  NO_CHANGE
  SLIGHTLY_HIGHER
  HIGHER
  MUCH_HIGHER
}

model Question {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId Int
  program   Program   @relation(fields: [programId], references: [id])
  comments  Comment[]

  questions String[] @default([])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  anonymous    Boolean        @default(false)
  upvotedUsers User[]         @relation("upvotedQuestions")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

model Dropped {
  id                       Int       @id @default(autoincrement())
  userId                   Int
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId                Int
  program                  Program   @relation(fields: [programId], references: [id])
  date                     DateTime
  dateOfInterviewCancelled DateTime?
  reason                   String?
  anonymous                Boolean   @default(false)
  comments                 Comment[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedDropped")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

model FellowshipMatch {
  id        Int       @id @default(autoincrement())
  year      Int
  programId Int
  program   Program   @relation(fields: [programId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchData String
  anonymous Boolean   @default(false)
  comments  Comment[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  upvotedUsers User[]         @relation("upvotedFellowshipMatches")
  Notification Notification[]

  @@index([programId])
  @@index([userId])
  @@index(fields: [programId, userId])
}

model TierList {
  id          Int          @id @default(autoincrement())
  img         Boolean?
  title       String
  bins        Bin[]
  comments    Comment[]
  suggestions Suggestion[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Bin {
  id         Int             @id @default(autoincrement())
  name       String
  order      Int
  programs   BinAssignment[]
  tierListId Int
  tierList   TierList        @relation(fields: [tierListId], references: [id])

  @@unique([tierListId, order])
}

model BinAssignment {
  id        Int @id @default(autoincrement())
  binId     Int
  programId Int
  rank      Int

  bin          Bin     @relation(fields: [binId], references: [id], onDelete: Cascade)
  program      Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  upvotedUsers User[]  @relation("upvotedBinAssignments")

  @@unique([binId, programId])
  @@unique([binId, rank])
}

model Suggestion {
  id         Int      @id @default(autoincrement())
  content    String
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tierListId Int
  tierList   TierList @relation(fields: [tierListId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  anonymous  Boolean  @default(false)
}

model XorY {
  id           Int            @id @default(autoincrement())
  programX     Program        @relation("ProgramXRelation", fields: [programXId], references: [id])
  programXId   Int
  programY     Program        @relation("ProgramYRelation", fields: [programYId], references: [id])
  programYId   Int
  question     String
  comments     Comment[]
  userId       Int
  img          Boolean?
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  anonymous    Boolean        @default(false)
  upvotedUsers User[]         @relation("upvotedXorY")
  Notification Notification[]

  @@index([programXId])
  @@index([programYId])
  @@index([userId])
  @@index(fields: [programXId, programYId, userId])
}

model Notification {
  userId                Int
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  id                    Int                  @id @default(autoincrement())
  RankList              RankList?            @relation(fields: [rankListId], references: [id])
  rankListId            Int?
  PostIVCommunication   PostIVCommunication? @relation(fields: [postIVCommunicationId], references: [id], onDelete: Cascade)
  postIVCommunicationId Int?
  ScheduleDetails       ScheduleDetails?     @relation(fields: [scheduleDetailsId], references: [id], onDelete: Cascade)
  scheduleDetailsId     Int?
  M4InternImpression    M4InternImpression?  @relation(fields: [m4InternImpressionId], references: [id], onDelete: Cascade)
  m4InternImpressionId  Int?
  Malignant             Malignant?           @relation(fields: [malignantId], references: [id], onDelete: Cascade)
  malignantId           Int?
  LOIResponse           LOIResponse?         @relation(fields: [lOIResponseId], references: [id], onDelete: Cascade)
  lOIResponseId         Int?
  InterviewImpression   InterviewImpression? @relation(fields: [interviewImpressionId], references: [id], onDelete: Cascade)
  interviewImpressionId Int?
  XorY                  XorY?                @relation(fields: [xorYId], references: [id], onDelete: Cascade)
  xorYId                Int?
  InterviewInvite       InterviewInvite?     @relation(fields: [interviewInviteId], references: [id], onDelete: Cascade)
  interviewInviteId     Int?
  FameShame             FameShame?           @relation(fields: [fameShameId], references: [id], onDelete: Cascade)
  fameShameId           Int?
  InterviewLogistics    InterviewLogistics?  @relation(fields: [interviewLogisticsId], references: [id], onDelete: Cascade)
  interviewLogisticsId  Int?
  SecondLook            SecondLook?          @relation(fields: [secondLookId], references: [id], onDelete: Cascade)
  secondLookId          Int?
  InterviewRejection    InterviewRejection?  @relation(fields: [interviewRejectionId], references: [id], onDelete: Cascade)
  interviewRejectionId  Int?
  Question              Question?            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId            Int?
  Dropped               Dropped?             @relation(fields: [droppedId], references: [id], onDelete: Cascade)
  droppedId             Int?
  FellowshipMatch       FellowshipMatch?     @relation(fields: [fellowshipMatchId], references: [id], onDelete: Cascade)
  fellowshipMatchId     Int?
  CityUserInput         CityUserInput?       @relation(fields: [cityUserInputId], references: [id], onDelete: Cascade)
  cityUserInputId       Int?
  commentId             Int? // The comment being replied to
  comment               Comment?             @relation("CommentBeingRepliedTo", fields: [commentId], references: [id], onDelete: Cascade)
  replyCommentId        Int? // The reply comment itself
  replyComment          Comment?             @relation("ReplyToComment", fields: [replyCommentId], references: [id], onDelete: Cascade)
  notificationType      NotificationType
  read                  Boolean              @default(false)

  @@index([userId])
}

enum NotificationType {
  COMMENT_REPLY
  POST_COMMENT
  PROGRAM_UPDATE
}
